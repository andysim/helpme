language: python
sudo: false

jobs:
  include:
    #
    # Format check
    #
    - stage: format check
      script: ./tools/check_style.sh

    #
    # Serial Py36 / Clang36 / Release
    #
    - stage: build and test
      python: "3.6"
      os: linux
      addons:
        apt:
          sources:
          - llvm-toolchain-precise-3.6
          - ubuntu-toolchain-r-test
          packages:
          - liblapack-dev
          - libfftw3-dev
          - clang-3.6
          - gfortran
      env:
        - NAME='clang'
        - CXX_COMPILER='/usr/bin/clang++-3.6'
        - C_COMPILER='/usr/bin/clang-3.6'
        - Fortran_COMPILER='/usr/bin/gfortran'
        - BUILD_TYPE='Release'
      before_script:
      - python -V
      - python -c 'import numpy; print(numpy.version.version)'
      - cd ${TRAVIS_BUILD_DIR}
      - export CTEST_OUTPUT_ON_FAILURE=1
      - ${CXX_COMPILER} --version
      - ${Fortran_COMPILER} --version
      - ${C_COMPILER} --version
      - >
          cmake -Bbuild -H.
          -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
          -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
          -DCMAKE_C_COMPILER=${C_COMPILER}
          -DCMAKE_Fortran_COMPILER=${Fortran_COMPILER}
          -DPYTHON_EXECUTABLE=`which python`
      - cd build
      - make -j 2
      script: ctest -j 2 -VV

    #
    # Serial Py35 / GCC49 / Debug
    #
    - stage: build and test
      os: linux
      python: "3.5"
      addons:
        apt:
          sources:
          - llvm-toolchain-precise-3.6
          - ubuntu-toolchain-r-test
          packages:
          - liblapack-dev
          - libfftw3-dev
          - g++-4.9
          - gcc-4.9
          - gfortran-4.9
      env:
        - NAME='gcc'
        - CXX_COMPILER='/usr/bin/g++-4.9'
        - C_COMPILER='/usr/bin/gcc-4.9'
        - Fortran_COMPILER='/usr/bin/gfortran-4.9'
        - BUILD_TYPE='Release'
      before_script:
      - python -V
      - python -c 'import numpy; print(numpy.version.version)'
      - cd ${TRAVIS_BUILD_DIR}
      - export CTEST_OUTPUT_ON_FAILURE=1
      - ${CXX_COMPILER} --version
      - ${Fortran_COMPILER} --version
      - ${C_COMPILER} --version
      - >
          cmake -Bbuild -H.
          -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
          -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
          -DCMAKE_C_COMPILER=${C_COMPILER}
          -DCMAKE_Fortran_COMPILER=${Fortran_COMPILER}
          -DPYTHON_EXECUTABLE=`which python`
      - cd build
      - make -j 2
      script: ctest -j 2 -VV

    #
    # MPI Py27 / GCC48 / Debug
    #
    - stage: build and test
      os: linux
      python: "2.7"
      addons:
        apt:
          sources:
          - llvm-toolchain-precise-3.6
          - ubuntu-toolchain-r-test
          packages:
          - lcov
          - liblapack-dev
          - libfftw3-dev
          - gfortran
          - libmpich-dev
          - mpich
      env:
        - NAME='mpi'
        - CXX_COMPILER='mpicxx'
        - C_COMPILER='mpicc'
        - Fortran_COMPILER='mpif90'
        - BUILD_TYPE='Debug'
      before_script:
      - python -V
      - python -c 'import numpy; print(numpy.version.version)'
      - cd ${TRAVIS_BUILD_DIR}
      - export CTEST_OUTPUT_ON_FAILURE=1
      - export PATH=${TRAVIS_BUILD_DIR}:${PATH}
      - ${CXX_COMPILER} --version
      - ${Fortran_COMPILER} --version
      - ${C_COMPILER} --version
      - >
          cmake -Bbuild -H.
          -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
          -DENABLE_CODE_COVERAGE=ON
          -DCMAKE_CXX_COMPILER=${CXX_COMPILER}
          -DCMAKE_C_COMPILER=${C_COMPILER}
          -DCMAKE_Fortran_COMPILER=${Fortran_COMPILER}
          -DPYTHON_EXECUTABLE=`which python`
      - cd build
      - cat CMakeCache.txt
      - make VERBOSE=1 -j 2
      script: ctest -VV
      after_success:
          # Creating report
        - cd ${TRAVIS_BUILD_DIR}
        - lcov --directory . --capture --output-file coverage.info # capture coverage info
        - lcov --remove coverage.info '/usr/*' '*single_include*'  --output-file coverage.info # filter out system
        - lcov --list coverage.info #debug info
        # Uploading report to CodeCov
        - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
