name: Github Actions Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build1:
    name:  Linux Clang 11 Py3.8 Release
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with: 
        python-version: '3.8'

    - name: Install Dependencies
      run: sudo apt-get -y install libfftw3-dev clang-11 libomp-11-dev

    - name: Configure CMake
      run: >
           cmake -B ${{github.workspace}}/build 
           -DCMAKE_BUILD_TYPE=Release
           -DCMAKE_CXX_COMPILER=clang++-11
           -DCMAKE_CXX_FLAGS="-fPIC -fopenmp=libomp"
           -DCMAKE_C_COMPILER=clang-11
           -DCMAKE_Fortran_COMPILER=gfortran
           -DPYTHON_EXECUTABLE=`which python`

    - name: Build
      run: cmake --build ${{github.workspace}}/build -j 2

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -VV -C ${{env.BUILD_TYPE}}


  build2:
    name:  Linux GCC 10 Py3.9 Release
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with: 
        python-version: '3.9'

    - name: Install Dependencies
      run: sudo apt-get -y install libfftw3-dev libomp-10-dev gcc-10 g++-10

    - name: Configure CMake
      run: >
           cmake -B ${{github.workspace}}/build 
           -DCMAKE_BUILD_TYPE=Release
           -DCMAKE_CXX_COMPILER=g++-10
           -DCMAKE_C_COMPILER=gcc-10
           -DCMAKE_Fortran_COMPILER=gfortran-10
           -DPYTHON_EXECUTABLE=`which python`

    - name: Build
      run: cmake --build ${{github.workspace}}/build -j 2

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -VV -C ${{env.BUILD_TYPE}}


  build3:
    name: Linux OpenMPI Py3.7 Debug
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with: 
        python-version: '3.7'

    - name: Install Dependencies
      run: sudo apt-get -y install libfftw3-dev openmpi-bin libopenmpi-dev clang-format lcov

    - name: Configure CMake
      run: >
           cmake -B ${{github.workspace}}/build 
           -DCMAKE_BUILD_TYPE=Debug
           -DENABLE_CODE_COVERAGE=ON
           -DCMAKE_CXX_COMPILER=mpicxx
           -DCMAKE_C_COMPILER=mpicc
           -DCMAKE_Fortran_COMPILER=mpif90
           -DPYTHON_EXECUTABLE=`which python`

    - name: Build
      run: cmake --build ${{github.workspace}}/build -j 2

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -VV -C ${{env.BUILD_TYPE}}

    - name: Upload CodeCov
      working-directory: ${{github.workspace}}/build
      run: |
           lcov --directory . --capture --output-file coverage.info # capture coverage info
           lcov --remove coverage.info '/usr/*' '*single_include*'  --output-file coverage.info # filter out system
           lcov --list coverage.info #debug info
           bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"


  formatcheck:
    name:  clang-format check
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: sudo apt-get -y install clang-format

    - name: Test
      working-directory: ${{github.workspace}}
      run: |
         ./tools/check_style.sh 
