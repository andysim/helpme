// BEGINLICENSE
//
// This file is part of helPME, which is distributed under the BSD 3-clause license,
// as described in the LICENSE file in the top level directory of this project.
//
// Author: Andrew C. Simmonett
//
// ENDLICENSE

#include "catch.hpp"

#include <map>

#include "cartesiantransform.h"

TEST_CASE("test cartesian rotation machinery.") {
    SECTION("double precision tests") {
        helpme::Matrix<double> R1{{-1.16639995, -0.72211986, -0.82344038},
                                  {-0.36198619, 1.38953368, -0.70580604},
                                  {1.03367168, -0.3282363, -1.1763434}};
        helpme::Matrix<double> labFrame{{0,           -0.02041926, 0,           -0.03078637, -0.01409171, 0,
                                         -0.04119584, -0.00077932, 0,           0.05528772,  -0.0036084,  0,
                                         -0.00096226, 0,           -0.01728634, 0,           -0.03837807, 0.00457065,
                                         0,           0.05566441,  0.0075137,   0,           0.00505921,  0,
                                         0.02241451,  -0.00375112, 0,           -0.00147521, 0,           -0.01257291,
                                         0,           -0.02747375, 0.00522633,  0,           0.04004666}};
        helpme::Matrix<double> refTransformed{
            {0.00000000,  0.04916776,  0.02912070,  0.01510853,  -0.00466243, 0.06664525,  -0.05424355,
             0.06037395,  0.07020247,  0.05890641,  0.07309189,  -0.05492763, -0.00656760, 0.14184217,
             -0.02472111, -0.10708923, 0.02025213,  -0.06652427, -0.08691454, 0.00446896,  -0.08278313,
             -0.01154724, 0.04553389,  -0.08733614, -0.06874441, -0.04726690, 0.07506839,  0.03189454,
             -0.11997046, 0.03724920,  0.09888346,  0.02321037,  0.01537234,  0.04490211,  -0.06045958}};
        SECTION("transform up to hexadecapoles") {
            auto transformed = cartesianTransform(4, R1, labFrame);
            REQUIRE(transformed.almostEquals(refTransformed));
        }

        SECTION("Dipole rotation matrix") {
            auto rotMat1 = makeCartesianRotationMatrix(1, R1);
            helpme::Matrix<double> refR1{
                {-1.16639995, -0.72211986, -0.82344038},
                {-0.36198619, 1.38953368, -0.70580604},
                {1.03367168, -0.32823630, -1.17634340},
            };
            REQUIRE(refR1.almostEquals(rotMat1));
        }

        SECTION("Quadrupole rotation matrix") {
            auto rotMat2 = makeCartesianRotationMatrix(2, R1);
            helpme::Matrix<double> refR2{
                {1.36048884, 1.68456114, 0.52145709, 1.92092164, 1.18924530, 0.67805406},
                {0.42222067, -1.35935460, -1.00340987, 1.12132618, -0.63452158, 0.58118919},
                {0.13103400, -1.00598401, 1.93080385, 0.51098408, -1.96148253, 0.49816217},
                {-1.20567460, -0.36358004, 0.23702595, 0.52091988, 1.11974395, 0.96864866},
                {-0.37417487, 1.55513862, -0.45609539, -0.30375165, -1.40289761, 0.83027028},
                {1.06847714, -0.67857714, 0.10773907, -2.43190572, 0.77223721, 1.38378379},
            };
            REQUIRE(refR2.almostEquals(rotMat2));
        }
        SECTION("Octopole rotation matrix") {
            auto rotMat3 = makeCartesianRotationMatrix(3, R1);
            helpme::Matrix<double> refR3{{-1.58687412, -2.94730804, -1.82468258, -0.37655452, -3.36084435, -4.16140699,
                                          -1.28816648, -2.37264666, -1.46890891, -0.55833709},
                                         {-0.49247817, 1.28065720, 2.15199417, 0.72458219, -1.65558835, 1.04972151,
                                          1.28444884, -1.60124430, 0.10280243, -0.47857465},
                                         {-0.15283805, 1.07875744, -1.52564848, -1.39427180, -0.70391049, 2.74724922,
                                          -0.17347637, -1.00182125, 1.25543112, -0.41020684},
                                         {-0.04743250, 0.54622848, -2.09677299, 2.68291698, -0.27745377, 2.13008876,
                                          -4.08831905, -0.54098347, 2.07663932, -0.35160587},
                                         {1.40629879, 1.29472132, -0.01391869, -0.17116115, 0.38520022, -1.38284939,
                                          -1.00376609, -1.55877821, -1.62152282, -0.79762442},
                                         {0.43643755, -1.54371450, -0.59100684, 0.32935554, 0.66240661, 0.57512086,
                                          1.38862759, -0.71830584, 0.55564789, -0.68367807},
                                         {0.13544614, -1.08286729, 2.32601772, -0.63375991, 0.37404879, -1.01186982,
                                          -1.62745860, -0.08615663, 2.14386212, -0.58600978},
                                         {-1.24627169, 0.01992377, 0.36434718, -0.07780052, 1.95674748, 1.41415779,
                                          -0.64636453, 0.38848402, -1.63514906, -1.13946345},
                                         {-0.38677397, 1.73032053, -0.98190584, 0.14970706, 0.12617866, -3.17981027,
                                          0.99700673, 1.21554312, 1.37776450, -0.97668296},
                                         {1.10445456, -1.05213895, 0.33410047, -0.03536387, -3.77068810, 2.39471920,
                                          -0.38021443, 4.29113436, -1.36262422, -1.62780493}};
            REQUIRE(refR3.almostEquals(rotMat3));
        }
        SECTION("Hexadecapole rotation matrix") {
            auto rotMat4 = makeCartesianRotationMatrix(4, R1);
            helpme::Matrix<double> refR4{
                {1.85092989, 4.58365327, 4.25661934, 1.75685270, 0.27191750, 5.22678491, 9.70772981, 6.01006926,
                 1.24028080, 5.53490990, 6.85334110, 2.12145659, 2.60497743, 1.61274521, 0.45975731},
                {0.57442652, -1.13813023, -3.43487389, -2.39915036, -0.52323519, 2.33660458, -1.08340674, -4.02824471,
                 -1.52417625, 3.23096957, 0.17199848, -1.13190272, 1.87673866, 0.26093658, 0.39407769},
                {0.17827030, -1.14789523, 1.00052414, 2.72797963, 1.00683136, 0.94689419, -3.58437605, -0.52521983,
                 1.27337043, 1.74815258, -3.00309573, -0.76372430, 1.30340531, -0.73755417, 0.33778088},
                {0.05532526, -0.60286892, 2.05123347, -1.61523281, -1.93738763, 0.36267990, -2.73396713, 4.95700329,
                 0.74303421, 0.85946973, -3.78553819, 1.86690450, 0.85558070, -1.45608710, 0.28952647},
                {0.01716991, -0.26363622, 1.51800573, -3.88471558, 3.72800350, 0.13391258, -1.54212543, 5.91966015,
                 -7.57447603, 0.39165709, -3.00685903, 5.77112056, 0.50910587, -1.95427277, 0.24816554},
                {-1.64030684, -2.52567916, -0.91870922, 0.20969331, 0.12359886, -1.60730073, 0.26866892, 2.18083693,
                 0.86578043, 1.50096941, 4.15566287, 1.99747536, 2.21391000, 1.91120780, 0.65679615},
                {-0.50906074, 1.48542829, 1.80409725, 0.04261749, -0.23783418, -1.13201134, 0.12199894, -1.54834245,
                 -1.27396021, 0.29237954, -0.60298250, -1.54469640, 1.38892410, 0.03615461, 0.56296813},
                {-0.15798437, 1.16524801, -1.93110698, -0.94044607, 0.45765062, -0.54782231, 1.80181350, 0.71362200,
                 1.69708368, -0.20751379, -1.60517079, -0.20801029, 0.75446662, -1.34217334, 0.48254411},
                {-0.04902963, 0.58018997, -2.34666687, 3.46149230, -0.88063074, -0.23099920, 1.65033056, -2.45862702,
                 -1.81409696, -0.23281839, -0.18158218, 4.12763873, 0.27293731, -2.32743115, 0.41360924},
                {1.45365123, 0.87671845, -0.43936189, -0.17235581, 0.05618130, -1.25611974, -3.07888583, -0.56729005,
                 0.53081675, -2.06439263, 0.46223113, 1.71301626, 1.00917669, 2.16927695, 0.93828022},
                {0.45113314, -1.73894861, -0.10420390, 0.53443539, -0.10810644, 0.17131052, 2.19299862, 1.94183646,
                 -0.84323320, -1.52171004, 0.13359190, -1.81588671, 0.13827567, -0.42922476, 0.80424019},
                {0.14000684, -1.16378759, 2.75977500, -1.41858312, 0.20802301, 0.22731247, 0.10510623, -4.08632105,
                 1.27971028, -0.52906749, 3.43463567, 1.21075681, -0.50439193, -2.32956837, 0.68934873},
                {-1.28823575, 0.42966625, 0.37007566, -0.20001217, 0.02553696, 3.48867793, 0.79606210, -1.56090403,
                 0.30368043, -1.90024206, -3.48125701, 1.29706192, -1.63482171, 2.29751008, 1.34040031},
                {-0.39979730, 1.91553658, -1.58292227, 0.47704509, -0.04913929, 0.58540632, -5.36374737, 3.22936523,
                 -0.50336072, 1.10804306, 4.76571959, -1.62505461, -2.43946564, -1.30014138, 1.14891455},
                {1.14164340, -1.45008832, 0.69070039, -0.14621854, 0.01160771, -5.19687134, 4.95070684, -1.57206754,
                 0.16640024, 8.87124813, -5.63402426, 0.89452546, -6.73046344, 2.13721867, 1.91485759}};
            REQUIRE(refR4.almostEquals(rotMat4));
        }
    }
}
