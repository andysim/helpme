// BEGINLICENSE
//
// This file is part of helPME, which is distributed under the BSD 3-clause license,
// as described in the LICENSE file in the top level directory of this project.
//
// Author: Andrew C. Simmonett
//
// ENDLICENSE

#include "catch.hpp"

#include <map>

#include "cartesiantransform.h"

TEST_CASE("test cartesian rotation machinery.") {
    SECTION("double precision tests") {
        helpme::Matrix<double> R1{{-1.16639995, -0.72211986, -0.82344038},
                                  {-0.36198619, 1.38953368, -0.70580604},
                                  {1.03367168, -0.3282363, -1.1763434}};
        helpme::Matrix<double> labFrame{{0,           -0.02041926, 0,           -0.03078637, -0.01409171, 0,
                                         -0.04119584, -0.00077932, 0,           0.05528772,  -0.0036084,  0,
                                         -0.00096226, 0,           -0.01728634, 0,           -0.03837807, 0.00457065,
                                         0,           0.05566441,  0.0075137,   0,           0.00505921,  0,
                                         0.02241451,  -0.00375112, 0,           -0.00147521, 0,           -0.01257291,
                                         0,           -0.02747375, 0.00522633,  0,           0.04004666}};
        helpme::Matrix<double> refTransformed{
            {0,           0.04916776, 0.02912069,  0.01510853,  -0.00155414, 0.04443017,  -0.01808118,
             0.0402493,   0.04680164, 0.01963547,  0.00487279,  -0.01098553, -0.00131352, 0.00945615,
             -0.00494423, -0.0428357, 0.00405042,  -0.01330485, -0.01738291, 0.00029793,  -0.00078841,
             -0.0004399,  0.00260194, -0.00332709, -0.00065471, -0.00180064, 0.00857925,  0.00364509,
             -0.0045703,  0.00212853, 0.01130097,  0.00132631,  0.00058561,  0.00171056,  -0.00057581}};
        SECTION("transform up to hexadecapoles") {
            auto transformed = cartesianTransform(4, R1, labFrame);
            REQUIRE(transformed.almostEquals(refTransformed));
        }

        SECTION("Dipole rotation matrix") {
            auto rotMat1 = makeCartesianRotationMatrix(1, R1);
            helpme::Matrix<double> refR1{
                {-1.16639995, -0.72211986, -0.82344038},
                {-0.36198619, 1.38953368, -0.70580604},
                {1.03367168, -0.32823630, -1.17634340},
            };
            REQUIRE(refR1.almostEquals(rotMat1));
        }

        SECTION("Quadrupole rotation matrix") {
            auto rotMat2 = makeCartesianRotationMatrix(2, R1);
            helpme::Matrix<double> refR2{{0.45349628, 0.56152038, 0.17381903, 0.64030721, 0.39641510, 0.22601802},
                                         {0.28148045, -0.90623640, -0.66893991, 0.74755078, -0.42301439, 0.38745946},
                                         {0.04367800, -0.33532800, 0.64360128, 0.17032803, -0.65382751, 0.16605406},
                                         {-0.80378306, -0.24238670, 0.15801730, 0.34727992, 0.74649597, 0.64576577},
                                         {-0.24944992, 1.03675908, -0.30406360, -0.20250110, -0.93526507, 0.55351352},
                                         {0.35615905, -0.22619238, 0.03591302, -0.81063524, 0.25741240, 0.46126126}};
            REQUIRE(refR2.almostEquals(rotMat2));
        }
        SECTION("Octopole rotation matrix") {
            auto rotMat3 = makeCartesianRotationMatrix(3, R1);
            helpme::Matrix<double> refR3{{-0.10579161, -0.19648720, -0.12164551, -0.02510363, -0.22405629, -0.27742713,
                                          -0.08587777, -0.15817644, -0.09792726, -0.03722247},
                                         {-0.09849563, 0.25613144, 0.43039883, 0.14491644, -0.33111767, 0.20994430,
                                          0.25688977, -0.32024886, 0.02056049, -0.09571493},
                                         {-0.03056761, 0.21575149, -0.30512970, -0.27885436, -0.14078210, 0.54944984,
                                          -0.03469527, -0.20036425, 0.25108622, -0.08204137},
                                         {-0.00316217, 0.03641523, -0.13978487, 0.17886113, -0.01849692, 0.14200592,
                                          -0.27255460, -0.03606556, 0.13844262, -0.02344039},
                                         {0.28125976, 0.25894426, -0.00278374, -0.03423223, 0.07704004, -0.27656988,
                                          -0.20075322, -0.31175564, -0.32430456, -0.15952488},
                                         {0.17457502, -0.61748580, -0.23640274, 0.13174222, 0.26496264, 0.23004835,
                                          0.55545104, -0.28732233, 0.22225915, -0.27347123},
                                         {0.02708923, -0.21657346, 0.46520354, -0.12675198, 0.07480976, -0.20237396,
                                          -0.32549172, -0.01723133, 0.42877242, -0.11720196},
                                         {-0.24925434, 0.00398475, 0.07286944, -0.01556010, 0.39134950, 0.28283156,
                                          -0.12927291, 0.07769680, -0.32702981, -0.22789269},
                                         {-0.07735479, 0.34606411, -0.19638117, 0.02994141, 0.02523573, -0.63596205,
                                          0.19940135, 0.24310862, 0.27555290, -0.19533659},
                                         {0.07363030, -0.07014260, 0.02227336, -0.00235759, -0.25137921, 0.15964795,
                                          -0.02534763, 0.28607562, -0.09084161, -0.10852033}};
            REQUIRE(refR3.almostEquals(rotMat3));
        }
        SECTION("Hexadecapole rotation matrix") {
            auto rotMat4 = makeCartesianRotationMatrix(4, R1);
            helpme::Matrix<double> refR4{
                {0.01762790, 0.04365384, 0.04053923, 0.01673193, 0.00258969, 0.04977890, 0.09245457, 0.05723875,
                 0.01181220, 0.05271343, 0.06526992, 0.02020435, 0.02480931, 0.01535948, 0.00437864},
                {0.02188291, -0.04335734, -0.13085234, -0.09139620, -0.01993277, 0.08901351, -0.04127264, -0.15345694,
                 -0.05806386, 0.12308455, 0.00655232, -0.04312010, 0.07149481, 0.00994044, 0.01501248},
                {0.01018687, -0.06559401, 0.05717281, 0.15588455, 0.05753322, 0.05410824, -0.20482149, -0.03001256,
                 0.07276402, 0.09989443, -0.17160547, -0.04364139, 0.07448030, -0.04214595, 0.01930176},
                {0.00210763, -0.02296643, 0.07814223, -0.06153268, -0.07380524, 0.01381638, -0.10415113, 0.18883822,
                 0.02830607, 0.03274170, -0.14421098, 0.07112017, 0.03259355, -0.05546998, 0.01102958},
                {0.00016352, -0.00251082, 0.01445720, -0.03699729, 0.03550480, 0.00127536, -0.01468691, 0.05637772,
                 -0.07213787, 0.00373007, -0.02863675, 0.05496305, 0.00484863, -0.01861212, 0.00236348},
                {-0.06248788, -0.09621635, -0.03499845, 0.00798832, 0.00470853, -0.06123050, 0.01023501, 0.08307950,
                 0.03298211, 0.05717979, 0.15831097, 0.07609430, 0.08433943, 0.07280792, 0.02502081},
                {-0.05817837, 0.16976323, 0.20618254, 0.00487057, -0.02718105, -0.12937272, 0.01394274, -0.17695342,
                 -0.14559545, 0.03341480, -0.06891229, -0.17653673, 0.15873418, 0.00413196, 0.06433922},
                {-0.01805536, 0.13317120, -0.22069794, -0.10747955, 0.05230293, -0.06260826, 0.20592154, 0.08155680,
                 0.19395242, -0.02371586, -0.18344809, -0.02377260, 0.08622476, -0.15339124, 0.05514790},
                {-0.00186780, 0.02210248, -0.08939683, 0.13186637, -0.03354784, -0.00879997, 0.06286974, -0.09366198,
                 -0.06910846, -0.00886927, -0.00691742, 0.15724338, 0.01039761, -0.08866404, 0.01575654},
                {0.08306578, 0.05009820, -0.02510639, -0.00984890, 0.00321036, -0.07177827, -0.17593633, -0.03241657,
                 0.03033239, -0.11796529, 0.02641321, 0.09788664, 0.05766724, 0.12395868, 0.05361601},
                {0.05155807, -0.19873698, -0.01190902, 0.06107833, -0.01235502, 0.01957834, 0.25062841, 0.22192417,
                 -0.09636951, -0.17390972, 0.01526765, -0.20752991, 0.01580293, -0.04905426, 0.09191316},
                {0.00800039, -0.06650215, 0.15770143, -0.08106189, 0.01188703, 0.01298928, 0.00600607, -0.23350406,
                 0.07312630, -0.03023243, 0.19626490, 0.06918610, -0.02882240, -0.13311819, 0.03939136},
                {-0.04907565, 0.01636824, 0.01409812, -0.00761951, 0.00097284, 0.13290202, 0.03032618, -0.05946301,
                 0.01156878, -0.07239017, -0.13261931, 0.04941188, -0.06227892, 0.08752419, 0.05106287},
                {-0.01523037, 0.07297282, -0.06030180, 0.01817315, -0.00187197, 0.02230119, -0.20433323, 0.12302344,
                 -0.01917565, 0.04221116, 0.18155122, -0.06190684, -0.09293202, -0.04952920, 0.04376817},
                {0.01087279, -0.01381036, 0.00657810, -0.00139256, 0.00011055, -0.04949401, 0.04714959, -0.01497207,
                 0.00158476, 0.08448808, -0.05365737, 0.00851929, -0.06409965, 0.02035446, 0.01823674}};
            REQUIRE(refR4.almostEquals(rotMat4));
        }
    }
}
