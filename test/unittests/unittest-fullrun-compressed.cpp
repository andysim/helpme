// BEGINLICENSE
//
// This file is part of helPME, which is distributed under the BSD 3-clause license,
// as described in the LICENSE file in the top level directory of this project.
//
// Author: Andrew C. Simmonett
//
// ENDLICENSE

#include "catch.hpp"

#include "helpme.h"

TEST_CASE("Full run with a small toy system, comprising two water molecules.") {
    // Setup parameters and reference values.
    helpme::Matrix<double> coordsD(
        {{2.0, 2.0, 2.0}, {2.5, 2.0, 3.0}, {1.5, 2.0, 3.0}, {0.0, 0.0, 0.0}, {0.5, 0.0, 1.0}, {-0.5, 0.0, 1.0}});
    helpme::Matrix<double> chargesD({-0.834, 0.417, 0.417, -0.834, 0.417, 0.417});
    short nfftx = 8;
    short nffty = 7;
    short nfftz = 6;
    short splineOrder = 4;
    helpme::Matrix<double> refChargeGridD({{-0.002399210936, -0.010444565592, -0.002423909155, 0.000001944100,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000005298328},
                                           {-0.009600314295, -0.042594342523, -0.011520236666, -0.000238216995,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000021192866},
                                           {-0.002405623789, -0.011893263344, -0.005660682536, -0.000434403961,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000005298105},
                                           {-0.000000635776, -0.000141446143, -0.000315942314, -0.000042590703,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {-0.000000000000, -0.000000000000, -0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {-0.000347981325, -0.010240812473, -0.000831489546, 0.000005993087,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000054696748},
                                           {-0.001219330871, -0.055536719558, -0.038634589577, -0.003548261523,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000218782397},
                                           {-0.000041866924, -0.036092635933, -0.063462773164, -0.006330510012,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000054694451},
                                           {0.000029877542, -0.002523366006, -0.006113267446, -0.000618488282,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {-0.000000000000, -0.000000000000, -0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.005054225648, 0.015222473725, 0.005255018967, 0.000109676300,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000032267624},
                                           {0.020983854333, 0.071560070178, 0.036532099443, 0.006118434692,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000129067786},
                                           {0.006415201620, 0.034151084363, 0.032771135657, 0.010184511930,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000032266269},
                                           {0.000132861769, 0.001847631030, 0.002685792564, 0.000983376915,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000117341952, 0.000488823559, 0.000304696348, 0.000035095608,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000417034},
                                           {0.000634581187, 0.008877851593, 0.015129791761, 0.002684617671,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000001668100},
                                           {0.000410413482, 0.012768254028, 0.024980365284, 0.004548117458,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000417016},
                                           {0.000028606372, 0.001198562792, 0.002408524127, 0.000440503556,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {-0.000000000000, -0.000000000000, -0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, -0.000000000000},
                                           {-0.000000000000, -0.000000000000, -0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, -0.000000000000},
                                           {-0.000000000000, -0.000000000000, -0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, -0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000},
                                           {-0.000000000000, -0.000000000000, -0.000000000000, 0.000000000000,
                                            0.000000000000, 0.000000000000, 0.000000000000, -0.000000000000}});
    helpme::Matrix<double> refTransGridD({{1.7814282e-16, -0.39115929, -0.44922488, 0.37415587, -0.43450041},
                                          {-0.024128747, -0.45239501, -0.53109601, 0.4071997, -0.4960651},
                                          {-0.011120801, 0.007365281, -0.16273419, -0.080805804, -0.12040141},
                                          {0.064495733, 0.34783158, 0.2911752, -0.31771483, 0.25803567},
                                          {0.0078165779, 0.20154673, 0.093209516, -0.23891051, 0.10840042},
                                          {3.3780229e-16, -0.39670492, -0.51027386, 0.35838138, -0.48440009},
                                          {-0.026290409, -0.46787594, -0.61189924, 0.39597139, -0.5621844},
                                          {-0.020028108, -0.029920108, -0.21362805, -0.055868588, -0.1623876},
                                          {0.068659711, 0.35355161, 0.33065357, -0.30723714, 0.28778969},
                                          {0.0071219333, 0.18363595, 0.084925655, -0.21767958, 0.098766729},
                                          {1.878431e-16, 0.083657407, -0.0718746, -0.14476537, -0.041419736},
                                          {-0.00042842522, 0.068904088, -0.11147496, -0.13930776, -0.07539068},
                                          {-0.024496195, -0.11641834, -0.11443046, 0.097395619, -0.09796764},
                                          {-0.0038125708, -0.071968466, 0.04630487, 0.11396732, 0.024967104},
                                          {-0.0041457228, -0.10689458, -0.049437616, 0.12671047, -0.057494013},
                                          {-1.5217107e-16, 0.25062501, 0.30533281, -0.23298284, 0.29239628},
                                          {0.016042329, 0.29276269, 0.36374161, -0.25546013, 0.33675494},
                                          {0.0099262327, 0.007249847, 0.11982087, 0.04342474, 0.090037918},
                                          {-0.042364178, -0.22311638, -0.1978789, 0.19877145, -0.17368313},
                                          {-0.0047504271, -0.12248759, -0.056646751, 0.14519506, -0.065878882},
                                          {7.3546109e-17, 0.23791845, 0.15363267, -0.27368316, 0.16860727},
                                          {0.010696032, 0.25533156, 0.16275972, -0.28486243, 0.17248482},
                                          {-0.012374257, -0.086263735, -0.0072938726, 0.10620105, -0.01487109},
                                          {-0.032120899, -0.20983974, -0.099781478, 0.22601735, -0.099867405},
                                          {-0.0065161647, -0.16801556, -0.077703725, 0.19916259, -0.090367029}

    });
    helpme::Matrix<double> refConvolvedGridD({{0, -2.2630998, -0.79297314, 0.6604611, -2.5138551},
                                              {-0.11905677, -1.2218146, -0.70020489, 0.53685815, -1.3397574},
                                              {-0.01104214, 0.0064046397, -0.10793662, -0.053596022, -0.10469765},
                                              {0.064039537, 0.30246449, 0.19312762, -0.21073054, 0.2243805},
                                              {0.038568786, 0.54433124, 0.12288881, -0.31498317, 0.29276453},
                                              {1.7747366e-15, -1.1407937, -0.71632059, 0.50309448, -1.3929763},
                                              {-0.06447719, -0.83742594, -0.66829809, 0.43246813, -1.0062236},
                                              {-0.015814904, -0.021552951, -0.12520314, -0.032743464, -0.11697591},
                                              {0.054216142, 0.25468092, 0.19378946, -0.18006556, 0.20730931},
                                              {0.017466531, 0.32868008, 0.092753265, -0.23774314, 0.17677725},
                                              {2.3613668e-16, 0.092100245, -0.060355444, -0.1215642, -0.045599881},
                                              {-0.00040225427, 0.059018418, -0.077684296, -0.09708033, -0.064574379},
                                              {-0.011570767, -0.053509465, -0.048141179, 0.040974579, -0.045028953},
                                              {-0.0018008662, -0.03307893, 0.019480574, 0.047946334, 0.011475652},
                                              {-0.0038924755, -0.091558416, -0.034451921, 0.088301568, -0.049245347},
                                              {-1.9129354e-16, 0.27591848, 0.25639791, -0.19564328, 0.32190538},
                                              {0.015062361, 0.25076002, 0.25348304, -0.1780242, 0.28844071},
                                              {0.0046886519, 0.0033322536, 0.050408938, 0.018268896, 0.041384208},
                                              {-0.020010702, -0.10255118, -0.083248146, 0.083623643, -0.079830132},
                                              {-0.0044602406, -0.10491429, -0.039475799, 0.10118305, -0.056427238},
                                              {3.8639457e-16, 0.68417568, 0.21566898, -0.38419542, 0.48485938},
                                              {0.026232003, 0.4570042, 0.17776131, -0.31111824, 0.30872128},
                                              {-0.0097711517, -0.062140085, -0.0042747931, 0.062242315, -0.01071239},
                                              {-0.025363801, -0.15115807, -0.058479933, 0.13246426, -0.07193949},
                                              {-0.015980884, -0.30072199, -0.084865689, 0.21751944, -0.16174308}});

    helpme::Matrix<double> refPotentialGridD(
        {{-9.328622945, -12.99816237, -10.69763265, -5.491528261, -2.609499587, -2.022924561, -1.895425846,
          -4.018565833},
         {-14.65912463, -22.06405613, -18.68097544, -9.137552425, -3.608108957, -2.685810945, -2.327013958,
          -5.387803485},
         {-11.2063786, -17.38608789, -15.99336283, -8.904481641, -3.712873252, -2.399272663, -2.292310826,
          -4.515083313},
         {-4.626143752, -6.74739843, -7.020022239, -5.022899088, -2.683345167, -1.633256193, -1.730331511,
          -2.656288958},
         {-2.403292468, -2.9817211, -2.892626842, -2.261731348, -1.575283451, -1.161863573, -1.146968661, -1.612855401},
         {-2.030029989, -2.517901025, -2.410924802, -1.823563624, -1.259803205, -0.9980896694, -1.031813755,
          -1.393017433},
         {-3.118617281, -3.733909305, -3.480441091, -2.58246664, -1.677621546, -1.220176036, -1.366481145,
          -2.106609082},
         {-4.203974604, -6.988587239, -6.262805949, -3.202218401, -1.30740205, -0.9378797888, -0.602385965,
          -1.24788314},
         {-7.815272918, -16.45187478, -16.71736965, -8.453331401, -2.071614674, -1.313445411, -1.05205577,
          -1.437661421},
         {-7.011964355, -16.23405426, -17.98705498, -9.902113298, -2.374696649, -1.156232802, -1.301063095,
          -1.382378724},
         {-3.19388366, -6.681464075, -7.814095636, -5.04272734, -1.766339318, -0.789766032, -0.9095207001,
          -1.169881867},
         {-1.263028114, -1.512288065, -1.456261153, -1.240882476, -0.922532054, -0.5745799532, -0.4706376835,
          -0.7847085103},
         {-0.9763868838, -1.532857492, -1.621670828, -1.12477565, -0.6037932296, -0.4299335967, -0.4344945511,
          -0.5487787537},
         {-1.278131145, -1.576266623, -1.513890782, -1.179783339, -0.7765746885, -0.4882181953, -0.476714396,
          -0.8010428546},
         {8.185389558, 11.09854594, 8.800319089, 4.238827439, 1.884896397, 1.515578532, 1.548449776, 3.566102911},
         {13.66863473, 20.15309737, 16.72062762, 7.910185644, 2.884506497, 2.05929891, 1.916260666, 5.067447581},
         {9.979399612, 15.26560794, 13.7769159, 7.448060496, 2.92307359, 1.789949752, 1.775783352, 3.951554268},
         {3.192230108, 4.559690436, 4.713425235, 3.376281761, 1.807754644, 1.113762779, 1.224623071, 1.888298082},
         {1.394577073, 1.543080985, 1.374506262, 1.09277151, 0.8732249284, 0.739304109, 0.7591462486, 1.026297909},
         {1.318933343, 1.620433415, 1.513042587, 1.103475419, 0.7667911649, 0.6564084259, 0.7018475515, 0.9202973868},
         {2.102303451, 2.343602393, 2.124374334, 1.608639335, 1.098889036, 0.8581290132, 1.027012148, 1.542208228},
         {6.325411875, 8.631741707, 8.061200241, 5.287373189, 2.932901101, 2.037631533, 2.128230975, 3.490997763},
         {10.17075871, 16.74311686, 16.99827284, 10.45519425, 4.359078014, 2.612511825, 2.826260246, 4.54354687},
         {9.291954059, 16.43707213, 17.6468915, 11.17851477, 4.483043582, 2.516795792, 2.769558396, 4.059064852},
         {4.920166102, 7.877555797, 8.574139762, 6.059430435, 3.062780249, 1.882024365, 1.95256375, 2.690639267},
         {2.251652656, 2.593690922, 2.538481687, 2.185733587, 1.698267092, 1.294265652, 1.254202411, 1.668913686},
         {1.878994219, 2.368415776, 2.391845019, 1.88879805, 1.329588233, 1.088552459, 1.131250945, 1.385912131},
         {2.809161924, 3.265010695, 3.07162951, 2.419820951, 1.742781056, 1.359588108, 1.443335912, 2.022488649},
         {0.8931229912, 0.950666463, 1.291572875, 1.461973698, 1.140133575, 0.7687522626, 0.7872967617, 0.9307337797},
         {0.8606203207, 0.2873029105, 0.6972536837, 1.577305025, 1.578351608, 0.9728043715, 0.9489678597, 1.247781165},
         {1.291825027, 0.8138822859, 0.9187221403, 1.559780448, 1.618767182, 1.046279092, 0.9204387003, 1.329811225},
         {1.451647555, 1.671099359, 1.672512266, 1.531853308, 1.233130316, 0.8745364757, 0.7645194732, 1.044320468},
         {0.9233505105, 1.214605065, 1.314332888, 1.11236061, 0.7981219866, 0.6074479059, 0.5809115234, 0.6823033278},
         {0.6470409279, 0.6954579292, 0.7097601415, 0.686924527, 0.6007265511, 0.4963048151, 0.4744294833,
          0.5532698326},
         {0.8858322038, 1.09964296, 1.12553893, 0.9470645385, 0.7213606217, 0.5819275378, 0.5578503395, 0.6619470579},
         {-2.371547667, -2.592104435, -2.404134973, -1.875881912, -1.209968665, -0.8383455109, -1.085524319,
          -1.764843766},
         {-2.48535537, -1.914897926, -1.543997326, -1.651924607, -1.432714193, -0.9527740766, -1.235989908,
          -2.178460188},
         {-2.215143669, -1.509615531, -0.9575612997, -1.173042167, -1.279379412, -0.9236068091, -1.064584075,
          -1.910403949},
         {-1.708548531, -1.712700358, -1.394128864, -1.131467113, -0.9389011377, -0.7372152706, -0.784232017,
          -1.244427808},
         {-1.073989425, -1.305437907, -1.286008225, -1.001450338, -0.6796715739, -0.5347972562, -0.5904756169,
          -0.7884593404},
         {-0.9666630536, -1.037567965, -0.9582962642, -0.7971860777, -0.6180804918, -0.5039952908, -0.5522931141,
          -0.7565835904},
         {-1.661512405, -1.979408024, -1.788266556, -1.266800379, -0.823578256, -0.6514893973, -0.7482401736,
          -1.123899591}});
    helpme::Matrix<double> refForcesD({{-0.41230550, -0.50824448, 5.67222769},
                                       {0.42424576, 0.35068651, -2.24312420},
                                       {0.26188240, 0.41883116, -2.34826121},
                                       {-0.92757057, -0.84061393, 4.32755867},
                                       {0.26654965, 0.31392810, -2.85026254},
                                       {0.38482119, 0.25142713, -2.68140811}});
    helpme::Matrix<double> refVirialD({1.06922198, -0.41789815, 1.08736968, -0.18294237, -0.05338644, -7.01875949});
    double refRecEnergy = 5.1590696008;

    SECTION("double precision tests E") {
        constexpr double TOL = 1e-7;
        helpme::Matrix<double> forcesD(6, 3);
        forcesD.setZero();
        double ccelec = 332.0716;

        auto pmeD = std::unique_ptr<PMEInstanceD>(new PMEInstanceD);
        pmeD->setupCompressed(1, 0.3, splineOrder, nfftx, nffty, nfftz, 2, 2, 2, ccelec, 1);
        pmeD->setLatticeVectors(20, 20, 20, 90, 90, 90, PMEInstanceD::LatticeType::XAligned);
        auto realGrid = pmeD->spreadParameters(0, chargesD, coordsD);
        helpme::Matrix<double> chargeGrid(realGrid, nfftz * nffty, nfftx);
        REQUIRE(refChargeGridD.almostEquals(chargeGrid, TOL));

        auto gridAddress = pmeD->compressedForwardTransform(realGrid);
        helpme::Matrix<double> transformedGrid(gridAddress, 5 * 5, 5);
        REQUIRE(refTransGridD.almostEquals(transformedGrid, TOL));

        double energy = pmeD->convolveE(gridAddress);
        helpme::Matrix<double> convolvedGrid(gridAddress, 5 * 5, 5);
        REQUIRE(refConvolvedGridD.almostEquals(convolvedGrid, TOL));

        realGrid = pmeD->compressedInverseTransform(gridAddress);
        helpme::Matrix<double> potentialGrid(realGrid, nfftz * nffty, nfftx);
        REQUIRE(refPotentialGridD.almostEquals(potentialGrid, TOL));

        pmeD->probeGrid(realGrid, 0, chargesD, coordsD, forcesD);
        REQUIRE(refForcesD.almostEquals(forcesD, TOL));
        REQUIRE(refRecEnergy == Approx(energy).margin(TOL));
    }

    SECTION("double precision tests EV") {
        constexpr double TOL = 1e-7;
        helpme::Matrix<double> forcesD(6, 3);
        forcesD.setZero();
        double ccelec = 332.0716;

        auto pmeD = std::unique_ptr<PMEInstanceD>(new PMEInstanceD);
        pmeD->setupCompressed(1, 0.3, splineOrder, nfftx, nffty, nfftz, 2, 2, 2, ccelec, 1);
        pmeD->setLatticeVectors(20, 20, 20, 90, 90, 90, PMEInstanceD::LatticeType::XAligned);
        auto realGrid = pmeD->spreadParameters(0, chargesD, coordsD);
        helpme::Matrix<double> chargeGrid(realGrid, nfftz * nffty, nfftx);
        REQUIRE(refChargeGridD.almostEquals(chargeGrid, TOL));

        auto gridAddress = pmeD->compressedForwardTransform(realGrid);
        helpme::Matrix<double> transformedGrid(gridAddress, 5 * 5, 5);
        REQUIRE(refTransGridD.almostEquals(transformedGrid, TOL));

        helpme::Matrix<double> virial(6, 1);
        double energy = pmeD->convolveEV(gridAddress, virial);
        REQUIRE(refVirialD.almostEquals(virial, TOL));

        helpme::Matrix<double> convolvedGrid(gridAddress, 5 * 5, 5);
        REQUIRE(refConvolvedGridD.almostEquals(convolvedGrid, TOL));

        realGrid = pmeD->compressedInverseTransform(gridAddress);
        helpme::Matrix<double> potentialGrid(realGrid, nfftz * nffty, nfftx);
        REQUIRE(refPotentialGridD.almostEquals(potentialGrid, TOL));

        pmeD->probeGrid(realGrid, 0, chargesD, coordsD, forcesD);
        REQUIRE(refForcesD.almostEquals(forcesD, TOL));
        REQUIRE(refRecEnergy == Approx(energy).margin(TOL));
    }

    SECTION("single precision tests E") {
        constexpr float TOL = 5e-5;
        helpme::Matrix<float> forcesF(6, 3);
        forcesF.setZero();
        float ccelec = 332.0716f;

        auto pmeF = std::unique_ptr<PMEInstanceF>(new PMEInstanceF);
        pmeF->setupCompressed(1, 0.3, splineOrder, nfftx, nffty, nfftz, 2, 2, 2, ccelec, 1);
        pmeF->setLatticeVectors(20, 20, 20, 90, 90, 90, PMEInstanceF::LatticeType::XAligned);
        auto realGrid = pmeF->spreadParameters(0, chargesD.cast<float>(), coordsD.cast<float>());
        helpme::Matrix<float> chargeGrid(realGrid, nfftz * nffty, nfftx);
        REQUIRE(refChargeGridD.cast<float>().almostEquals(chargeGrid, TOL));

        auto gridAddress = pmeF->compressedForwardTransform(realGrid);
        helpme::Matrix<float> transformedGrid(gridAddress, 5 * 5, 5);
        REQUIRE(refTransGridD.cast<float>().almostEquals(transformedGrid, TOL));

        float energy = pmeF->convolveE(gridAddress);
        helpme::Matrix<float> convolvedGrid(gridAddress, 5 * 5, 5);
        REQUIRE(refConvolvedGridD.cast<float>().almostEquals(convolvedGrid, TOL));

        realGrid = pmeF->compressedInverseTransform(gridAddress);
        helpme::Matrix<float> potentialGrid(realGrid, nfftz * nffty, nfftx);
        REQUIRE(refPotentialGridD.cast<float>().almostEquals(potentialGrid, TOL));

        pmeF->probeGrid(realGrid, 0, chargesD.cast<float>(), coordsD.cast<float>(), forcesF);
        REQUIRE(refForcesD.cast<float>().almostEquals(forcesF, TOL));
        REQUIRE(refRecEnergy == Approx(energy).margin(TOL));
    }

    SECTION("single precision tests EV") {
        constexpr float TOL = 5e-5;
        helpme::Matrix<float> forcesF(6, 3);
        forcesF.setZero();
        float ccelec = 332.0716f;

        auto pmeF = std::unique_ptr<PMEInstanceF>(new PMEInstanceF);
        pmeF->setupCompressed(1, 0.3, splineOrder, nfftx, nffty, nfftz, 2, 2, 2, ccelec, 1);
        pmeF->setLatticeVectors(20, 20, 20, 90, 90, 90, PMEInstanceF::LatticeType::XAligned);
        auto realGrid = pmeF->spreadParameters(0, chargesD.cast<float>(), coordsD.cast<float>());
        helpme::Matrix<float> chargeGrid(realGrid, nfftz * nffty, nfftx);
        REQUIRE(refChargeGridD.cast<float>().almostEquals(chargeGrid, TOL));

        auto gridAddress = pmeF->compressedForwardTransform(realGrid);
        helpme::Matrix<float> transformedGrid(gridAddress, 5 * 5, 5);
        REQUIRE(refTransGridD.cast<float>().almostEquals(transformedGrid, TOL));

        helpme::Matrix<float> virial(6, 1);
        float energy = pmeF->convolveEV(gridAddress, virial);
        helpme::Matrix<float> convolvedGrid(gridAddress, 5 * 5, 5);
        REQUIRE(refVirialD.cast<float>().almostEquals(virial, TOL));
        REQUIRE(refConvolvedGridD.cast<float>().almostEquals(convolvedGrid, TOL));

        realGrid = pmeF->compressedInverseTransform(gridAddress);
        helpme::Matrix<float> potentialGrid(realGrid, nfftz * nffty, nfftx);
        REQUIRE(refPotentialGridD.cast<float>().almostEquals(potentialGrid, TOL));

        pmeF->probeGrid(realGrid, 0, chargesD.cast<float>(), coordsD.cast<float>(), forcesF);
        REQUIRE(refForcesD.cast<float>().almostEquals(forcesF, TOL));
        REQUIRE(refRecEnergy == Approx(energy).margin(TOL));
    }
}
